name: Deploy main branch

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  create-docker-image:
    name: Build and push the Docker image to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Clone Repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.APPLICATION_NAME }}
          IMAGE_TAG: latest
        run: |
          echo ${{ steps.login-ecr.outputs.registry }}
          docker build \
          --file Dockerfile \
          --tag $REPOSITORY \
          --build-arg ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
          .
          docker tag $REPOSITORY $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy the new Docker image to ECS
    runs-on: ubuntu-latest
    needs: create-docker-image
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.SQUADFY_MASTER_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SQUADFY_MASTER_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update ECS service
        run: |
          aws ecs update-service --cluster ${{ vars.APPLICATION_NAME }} --service ${{ vars.APPLICATION_NAME }} --task-definition ${{ vars.APPLICATION_NAME }} --force-new-deployment